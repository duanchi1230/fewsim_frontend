{"version":3,"sources":["components/FlatView.js","components/CompareView.js","App.js","serviceWorker.js","index.js"],"names":["ECHARTS_TITLE_TEXT_STYLE","fontSize","FlatView","handleScenarioChange","event","name","newDisabledScenario","state","disabledScenarios","target","checked","setState","filter","x","push","handleSusIndexChange","newDisabledSusIndices","disabledSusIndices","handleAggregateScenarios","aggregateScenarios","handleAggregateSusIndex","aggregateIndices","handleCompareButtonClick","chartBlock","props","data","this","scenarioNames","susIndexNames","scenarioMenu","map","i","key","onChange","e","defaultChecked","susIndexMenu","style","marginBottom","marginLeft","marginRight","disabled","overlay","type","height","overflowY","overflowX","Component","FlatChartGrid","enabledScenarios","d","indexOf","enabledSusIndices","enabledChartBlocks","chartBlocks","block","scenarioName","susIndexName","width","grid","gutter","column","length","dataSource","renderItem","item","Item","size","bodyStyle","padding","option","title","text","textStyle","xAxis","timeRange","yAxis","left","right","bottom","top","containLabel","series","position","shape","icon","onClick","AggregatedChartGrid","rowData","filteredSusIndexData","currentSusIndexName","_chartBlocks","row","filteredScenarioData","currentScenarioName","_i","legend","r","tooltip","trigger","CompareView","handleCompareScenarioChange","value","handleCompareSusIndexChange","compareChartBlock","sortedChartBlocks","distance","a","b","numeric","norm2","sub","sort","span","marginTop","Option","orientation","toFixed","App","handleViewStatusChange","viewStatus","newCompare","seriesData","Array","from","iIndex","iScenario","scenarioIdx","susIndexIdx","Math","random","compareScenarioName","compareSusIndexName","viewComponent","headStyle","background","extra","Group","defaultValue","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a03708fc.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Row, Col, Dropdown, Menu, Checkbox, Divider, Switch, List, Card} from 'antd';\nimport ReactEcharts from 'echarts-for-react';\nimport {makeSeriesEncodeForNameBased} from \"echarts/src/data/helper/sourceHelper\";\n\n\nconst VIEW_CHART_HEIGHT = 180;\nconst ECHARTS_TITLE_TEXT_STYLE = {fontSize: 14};\n\nexport default class FlatView extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            disabledScenarios: [],\n            disabledSusIndices: [],\n            aggregateScenarios: false,\n            aggregateIndices: false\n        };\n    }\n\n    handleScenarioChange = (event, name) => {\n\n        let newDisabledScenario = [...this.state.disabledScenarios];\n\n        if (!event.target.checked) {\n            newDisabledScenario.push(name);\n            this.setState({\n                disabledScenarios: newDisabledScenario\n            });\n        } else {\n            this.setState({\n                disabledScenarios: newDisabledScenario.filter(x => x !== name)\n            })\n        }\n    };\n\n    handleSusIndexChange = (event, name) => {\n        let newDisabledSusIndices = [...this.state.disabledSusIndices];\n\n        if (!event.target.checked) {\n            newDisabledSusIndices.push(name);\n            this.setState({\n                disabledSusIndices: newDisabledSusIndices\n            });\n        } else {\n            this.setState({\n                disabledSusIndices: newDisabledSusIndices.filter(x => x !== name)\n            })\n        }\n\n    };\n\n    handleAggregateScenarios = (aggregateScenarios) => {\n        this.setState({aggregateScenarios});\n    };\n\n    handleAggregateSusIndex = (aggregateIndices) => {\n        this.setState({aggregateIndices});\n    };\n\n    handleCompareButtonClick = (chartBlock) => {\n        this.props.handleCompareButtonClick(chartBlock);\n    };\n\n    render() {\n\n        const {data} = this.props;\n        const {scenarioNames, susIndexNames} = data;\n\n        const scenarioMenu = <Menu>\n            {\n                scenarioNames.map((name, i) =>\n                    <Checkbox\n                        key={`scenario-${i}`}\n                        onChange={e => this.handleScenarioChange(e, name)}\n                        defaultChecked={true}\n                    >\n                        {name}\n                    </Checkbox>\n                )\n            }\n        </Menu>;\n\n        const susIndexMenu = <Menu>\n            {\n                susIndexNames.map((name, i) =>\n                    <Checkbox\n                        key={`susindex-${i}`}\n                        onChange={e => this.handleSusIndexChange(e, name)}\n                        defaultChecked={true}\n                    >\n                        {name}\n                    </Checkbox>\n                )\n            }\n        </Menu>;\n\n        return (\n            <div>\n                <Row\n                    style={{\n                        marginBottom: 16\n                    }}\n                >\n                    <span>Aggreate Scenarios</span>\n                    <Switch\n                        defaultChecked={this.state.aggregateScenarios}\n                        onChange={this.handleAggregateScenarios}\n                        style={{marginLeft: 4, marginRight: 8}}\n                    />\n\n                    <Dropdown disabled={this.state.aggregateScenarios} overlay={scenarioMenu}>\n                        <Button>Scenarios</Button>\n                    </Dropdown>\n\n                    <Divider type=\"vertical\"/>\n\n                    <span>Aggreate Indices</span>\n                    <Switch\n                        defaultChecked={this.state.aggregateIndices}\n                        onChange={this.handleAggregateSusIndex}\n                        style={{marginLeft: 4, marginRight: 8}}\n                    />\n\n                    <Dropdown disabled={this.state.aggregateIndices} overlay={susIndexMenu}>\n                        <Button>Sustainability Indices</Button>\n                    </Dropdown>\n                </Row>\n                <Row\n                    style={{\n                        height: 685,\n                        overflowY: 'scroll',\n                        overflowX: 'hidden'\n                    }}\n                >\n                    {\n                        (this.state.aggregateScenarios || this.state.aggregateIndices)\n                            ? <AggregatedChartGrid\n                                data={this.props.data}\n                                disabledScenarios={this.state.disabledScenarios}\n                                disabledSusIndices={this.state.disabledSusIndices}\n                                aggregateScenarios={this.state.aggregateScenarios}\n                                aggregateIndices={this.state.aggregateIndices}\n                            />\n                            : <FlatChartGrid\n                                data={this.props.data}\n                                disabledScenarios={this.state.disabledScenarios}\n                                disabledSusIndices={this.state.disabledSusIndices}\n                                handleCompareButtonClick={this.handleCompareButtonClick}\n                            />\n                    }\n                </Row>\n            </div>\n        );\n    };\n}\n\n\nclass FlatChartGrid extends Component {\n    constructor() {\n        super();\n    }\n\n    handleCompareButtonClick = (chartBlock) => {\n        this.props.handleCompareButtonClick(chartBlock);\n    };\n\n    render() {\n\n        const {data, disabledScenarios, disabledSusIndices} = this.props;\n        const enabledScenarios = data.scenarioNames.filter(\n            d => disabledScenarios.indexOf(d) === -1\n        );\n        const enabledSusIndices = data.susIndexNames.filter(\n            d => disabledSusIndices.indexOf(d) === -1\n        );\n\n        const enabledChartBlocks = data.chartBlocks.filter(\n            block =>\n                enabledScenarios.indexOf(block.scenarioName) >= 0\n                && enabledSusIndices.indexOf(block.susIndexName) >= 0\n        );\n\n\n        return (\n            <div\n                style={{\n                    width: '100%',\n                    height: '100%',\n                    // backgroundColor: 'blue'\n                }}\n            >\n                <List\n                    grid={{gutter: 8, column: enabledScenarios.length}}\n                    dataSource={enabledChartBlocks}\n                    renderItem={item => {\n                        return <List.Item>\n                            <Card\n                                // title={`${item.scenarioName}, ${item.susIndexName}`}\n                                size=\"small\"\n                                bodyStyle={{\n                                    padding: 8,\n                                    height: '100%'\n                                }}\n                                style={{\n                                    // width: 300,\n                                    height: VIEW_CHART_HEIGHT\n                                }}\n                            >\n                                <ReactEcharts\n                                    option={{\n                                        title: {\n                                            text: `${item.scenarioName}, ${item.susIndexName}`,\n                                            textStyle: ECHARTS_TITLE_TEXT_STYLE\n                                        },\n                                        xAxis: {\n                                            type: 'category',\n                                            data: data.timeRange\n                                        },\n                                        yAxis: {\n                                            type: 'value'\n                                        },\n                                        grid: {\n                                            left: '3%',\n                                            right: '4%',\n                                            bottom: '3%',\n                                            top: '18%',\n                                            containLabel: true\n                                        },\n                                        series: [{\n                                            name: item.susIndexName,\n                                            type: 'line',\n                                            data: item.series\n                                        }]\n                                    }}\n                                    style={{\n                                        height: '100%',\n                                        width: '100%'\n                                    }}\n                                />\n                                <div\n                                    style={{\n                                        position: 'absolute',\n                                        right: 20,\n                                        top: 10\n                                    }}\n                                >\n                                    <Button\n                                        size=\"small\"\n                                        shape=\"circle\"\n                                        icon=\"link\"\n                                        onClick={() => this.handleCompareButtonClick(item)}\n                                    />\n                                </div>\n                            </Card>\n                        </List.Item>\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nclass AggregatedChartGrid extends Component {\n    constructor() {\n        super();\n    }\n\n    render() {\n        const {\n            data,\n            disabledScenarios, disabledSusIndices,\n            aggregateScenarios, aggregateIndices\n        } = this.props;\n\n        let rowData = [];\n\n        // prepare the row data\n        if (aggregateScenarios) {\n            // filter indices first\n            const filteredSusIndexData = data.chartBlocks.filter(\n                block => disabledSusIndices.indexOf(block.susIndexName) === -1\n            );\n\n            const enabledSusIndices = data.susIndexNames.filter(\n                d => disabledSusIndices.indexOf(d) === -1\n            );\n\n            for (let i = 0; i < enabledSusIndices.length; i++) {\n                const currentSusIndexName = enabledSusIndices[i];\n\n                // the filtered _chartBlock will be in the same row\n                const _chartBlocks = filteredSusIndexData.filter(\n                    block => block.susIndexName === currentSusIndexName\n                );\n\n                let row = {\n                    title: {\n                        text: currentSusIndexName,\n                        textStyle: ECHARTS_TITLE_TEXT_STYLE\n                    },\n                    series: _chartBlocks.map(block => {\n                        return {\n                            name: block.scenarioName,\n                            type: 'line',\n                            data: block.series\n                        };\n                    })\n                };\n\n                rowData.push(row);\n            }\n        } else if (aggregateIndices) {\n            // filter scenarios first\n            const filteredScenarioData = data.chartBlocks.filter(\n                block => disabledScenarios.indexOf(block.scenarioName) === -1\n            );\n\n            const enabledScenarios = data.scenarioNames.filter(\n                d => disabledScenarios.indexOf(d) === -1\n            );\n\n            for (let i = 0; i < enabledScenarios.length; i++) {\n                const currentScenarioName = enabledScenarios[i];\n\n                const _chartBlocks = filteredScenarioData.filter(\n                    block => block.scenarioName === currentScenarioName\n                );\n\n                rowData.push({\n                    title: {\n                        text: currentScenarioName,\n                        textStyle: ECHARTS_TITLE_TEXT_STYLE\n                    },\n                    series: _chartBlocks.map(block => {\n                        return {\n                            name: block.susIndexName,\n                            type: 'line',\n                            data: block.series\n                        };\n                    })\n                });\n            }\n        }\n\n\n        return (\n            <div\n                style={{\n                    width: '100%',\n                    height: '100%'\n                }}\n            >\n                {\n                    rowData.map((row, _i) => {\n                        return (\n                            <Row\n                                key={`row-${_i}`}\n                                style={{\n                                    height: VIEW_CHART_HEIGHT,\n                                    width: '100%'\n                                }}\n                            >\n                                <ReactEcharts\n                                    option={{\n                                        ...row,\n                                        legend: {\n                                            data: row.series.map(r => r.name)\n                                        },\n                                        tooltip: {\n                                            trigger: 'axis'\n                                        },\n                                        xAxis: {\n                                            type: 'category',\n                                            data: data.timeRange\n                                        },\n                                        yAxis: {\n                                            type: 'value'\n                                        },\n                                        grid: {\n                                            left: '3%',\n                                            right: '4%',\n                                            bottom: '3%',\n                                            top: '18%',\n                                            containLabel: true\n                                        },\n                                    }}\n                                    style={{\n                                        height: '100%',\n                                        width: '100%'\n                                    }}\n                                />\n                            </Row>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport {Button, Row, Col, Divider, List, Card, Select} from 'antd';\nimport ReactEcharts from 'echarts-for-react';\nimport numeric from 'numericjs';\n\nconst VIEW_CHART_HEIGHT = 162;\nconst VIEW_CHART_WIDTH = 368;\nconst VIEW_SIMILAR_RESULT_HEIGHT = 500;\nconst VIEW_SIMILAR_RESULT_NUM_COL = 3;\nconst ECHARTS_TITLE_TEXT_STYLE = {fontSize: 14};\n\n\nconst computeDistance = (a, b) => {\n    return numeric.norm2(\n        numeric.sub(a.series, b.series)\n    )\n};\n\n\nexport default class CompareView extends Component {\n\n    constructor() {\n        super();\n    }\n\n    handleCompareScenarioChange = (value) => {\n        this.props.handleCompareScenarioChange(value);\n    };\n\n    handleCompareSusIndexChange = (value) => {\n        this.props.handleCompareSusIndexChange(value);\n    };\n\n    render() {\n\n        const {data, compareChartBlock} = this.props;\n\n        if (compareChartBlock === null) {\n            return <div>Please select a chart first</div>;\n        }\n\n\n        const remainedChartBlocks = data.chartBlocks.filter(\n            block => compareChartBlock !== block\n        );\n\n        // rank the charts with a specific measure\n        const sortedChartBlocks = remainedChartBlocks.map(block => ({\n            distance: computeDistance(block, compareChartBlock),\n            chartBlock: block\n        })).sort((a, b) => {\n            if (a.distance < b.distance) return -1;\n            else return 1;\n        });\n\n        return (\n            <div>\n                <Row>\n                    <Col span={6}>\n                        <Row\n                            style={{\n                                marginTop: 8\n                            }}\n                        >\n                            <span>Scenario: </span>\n                            <Select\n                                value={compareChartBlock.scenarioName}\n                                onChange={this.handleCompareScenarioChange}\n                            >\n                                {\n                                    data.scenarioNames.map(\n                                        (name, i) => <Select.Option\n                                            value={name}\n                                            key={`scenario-${i}`}\n                                        >\n                                            {name}\n                                        </Select.Option>\n                                    )\n                                }\n                            </Select>\n                        </Row>\n                        <Row\n                            style={{\n                                marginTop: 16\n                            }}\n                        >\n                            <span>Sustainability Index: </span>\n                            <Select\n                                value={compareChartBlock.susIndexName}\n                                onChange={this.handleCompareSusIndexChange}\n                            >\n                                {\n                                    data.susIndexNames.map(\n                                        (name, i) => <Select.Option\n                                            value={name}\n                                            key={`susindex-${i}`}\n                                        >\n                                            {name}\n                                        </Select.Option>\n                                    )\n                                }\n                            </Select>\n                        </Row>\n                        <Row\n                            style={{\n                                marginTop: 16\n                            }}\n                        >\n                            <span>Distance Measure: </span>\n                            <Select\n                                value={'euclidean'}\n                            >\n                                <Select.Option value=\"euclidean\">Euclidean</Select.Option>\n                            </Select>\n                        </Row>\n                    </Col>\n                    <Col span={16}>\n                        <ReactEcharts\n                            option={{\n                                title: {\n                                    text: `${compareChartBlock.scenarioName}, ${compareChartBlock.susIndexName}`,\n                                    textStyle: ECHARTS_TITLE_TEXT_STYLE\n                                },\n                                xAxis: {\n                                    type: 'category',\n                                    data: data.timeRange\n                                },\n                                yAxis: {\n                                    type: 'value'\n                                },\n                                grid: {\n                                    left: '3%',\n                                    right: '4%',\n                                    bottom: '3%',\n                                    top: '18%',\n                                    containLabel: true\n                                },\n                                series: [{\n                                    name: compareChartBlock.susIndexName,\n                                    type: 'line',\n                                    data: compareChartBlock.series\n                                }]\n                            }}\n                            style={{\n                                height: VIEW_CHART_HEIGHT,\n                                width: VIEW_CHART_WIDTH\n                            }}\n                        />\n                    </Col>\n                </Row>\n\n                <Divider orientation=\"left\">Most Similar Charts</Divider>\n\n                <div\n                    style={{\n                        width: '100%',\n                        height: VIEW_SIMILAR_RESULT_HEIGHT,\n                        overflowX: \"hidden\",\n                        overflowY: \"scroll\"\n                    }}\n                >\n                    <List\n                        grid={{gutter: 8, column: VIEW_SIMILAR_RESULT_NUM_COL}}\n                        dataSource={sortedChartBlocks}\n                        renderItem={item => {\n                            return <List.Item>\n                                <Card\n                                    // title={`${item.scenarioName}, ${item.susIndexName}`}\n                                    size=\"small\"\n                                    bodyStyle={{\n                                        padding: 8,\n                                        height: '100%'\n                                    }}\n                                    style={{\n                                        // width: 300,\n                                        height: VIEW_CHART_HEIGHT\n                                    }}\n                                >\n                                    <ReactEcharts\n                                        option={{\n                                            title: {\n                                                text: `${item.chartBlock.scenarioName}, ${item.chartBlock.susIndexName}`,\n                                                textStyle: ECHARTS_TITLE_TEXT_STYLE\n                                            },\n                                            xAxis: {\n                                                type: 'category',\n                                                data: data.timeRange\n                                            },\n                                            yAxis: {\n                                                type: 'value'\n                                            },\n                                            grid: {\n                                                left: '3%',\n                                                right: '4%',\n                                                bottom: '3%',\n                                                top: '18%',\n                                                containLabel: true\n                                            },\n                                            series: [{\n                                                name: item.chartBlock.susIndexName,\n                                                type: 'line',\n                                                data: item.chartBlock.series\n                                            }]\n                                        }}\n                                        style={{\n                                            height: '100%',\n                                            width: '100%'\n                                        }}\n                                    />\n                                    <div\n                                        style={{\n                                            position: 'absolute',\n                                            right: 20,\n                                            top: 10\n                                        }}\n                                    >\n                                        {`Distance: ${item.distance.toFixed(3)}`}\n                                    </div>\n                                </Card>\n                            </List.Item>\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    };\n}\n","import React, {Component} from 'react';\nimport {Card, Button, Radio} from 'antd';\nimport './App.css';\n\nimport FlatView from \"./components/FlatView\";\nimport CompareView from \"./components/CompareView\";\n\nconst TEST_NUM_SCENARIO = 3;\nconst TEST_NUM_INDEX = 4;\nconst TEST_NUM_TIME_STEP = 11;\n\nconst VIEW_STATUS_FLAT = 'VIEW_STATUS_FLAT';\nconst VIEW_STATUS_COMPARE = 'VIEW_STATUS_COMPARE';\n\nconst createRandomSeries = () => Array.from(Array(TEST_NUM_TIME_STEP)).map(x => Math.random());\n\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        let seriesData = {\n            data: {\n                timeRange: [2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018],\n                scenarioNames: Array.from(Array(TEST_NUM_SCENARIO)).map((d, i) => `Scenario ${i}`),\n                susIndexNames: Array.from(Array(TEST_NUM_INDEX)).map((d, i) => `Index ${i}`),\n            }\n        };\n\n        // initialize the data\n\n        let chartBlocks = [];\n\n        for (let iIndex = 0; iIndex < TEST_NUM_INDEX; iIndex++) {\n            for (let iScenario = 0; iScenario < TEST_NUM_SCENARIO; iScenario++) {\n                chartBlocks.push({\n                    scenarioIdx: iScenario,\n                    scenarioName: `Scenario ${iScenario}`,\n                    susIndexIdx: iIndex,\n                    susIndexName: `Index ${iIndex}`,\n                    series: createRandomSeries()\n                })\n            }\n        }\n\n        seriesData.data.chartBlocks = chartBlocks;\n\n        this.state = seriesData;\n        this.state.viewStatus = VIEW_STATUS_FLAT;\n\n        // states for the compare view\n        this.state.compareChartBlock = null;\n        this.state.compareScenarioName = null;\n        this.state.compareSusIndexName = null;\n    }\n\n    handleViewStatusChange = (event) => {\n        this.setState({\n            viewStatus: event.target.value\n        })\n    };\n\n    handleCompareButtonClick = (chartBlock) => {\n        this.setState({\n            compareChartBlock: chartBlock,\n            viewStatus: VIEW_STATUS_COMPARE\n        });\n    };\n\n    handleCompareScenarioChange = (value) => {\n        const newCompare = this.state.data.chartBlocks.filter(\n            block => block.susIndexName === this.state.compareChartBlock.susIndexName\n                && block.scenarioName === value\n        );\n\n        this.setState({\n            compareChartBlock: newCompare[0]\n        });\n    };\n\n    handleCompareSusIndexChange = (value) => {\n\n        const newCompare = this.state.data.chartBlocks.filter(\n            block => block.scenarioName === this.state.compareChartBlock.scenarioName\n                && block.susIndexName === value\n        );\n\n        this.setState({\n            compareChartBlock: newCompare[0]\n        });\n    };\n\n    render() {\n\n        let viewComponent;\n        if (this.state.viewStatus === VIEW_STATUS_FLAT) {\n            viewComponent = <FlatView\n                data={this.state.data}\n                handleCompareButtonClick={this.handleCompareButtonClick}\n            />;\n        } else if (this.state.viewStatus === VIEW_STATUS_COMPARE) {\n            viewComponent = <CompareView\n                data={this.state.data}\n                compareChartBlock={this.state.compareChartBlock}\n                handleCompareScenarioChange={this.handleCompareScenarioChange}\n                handleCompareSusIndexChange={this.handleCompareSusIndexChange}\n            />;\n        }\n\n\n        return (\n            <div\n                style={{\n                    width: 1200,\n                    height: 800,\n                    marginLeft: 20,\n                    marginTop: 20\n                }}\n            >\n                <Card\n                    size=\"small\"\n                    title=\"Sustainability Index View\"\n                    headStyle={{\n                        background: 'rgb(236, 236, 236)'\n                    }}\n                    style={{\n                        width: '100%',\n                        height: '100%'\n                    }}\n                    extra={\n                        <Radio.Group\n                            onChange={this.handleViewStatusChange}\n                            defaultValue={VIEW_STATUS_FLAT}\n                            value={this.state.viewStatus}\n                            size=\"small\"\n                        >\n                            <Radio.Button value={VIEW_STATUS_FLAT}>Flat Mode</Radio.Button>\n                            <Radio.Button value={VIEW_STATUS_COMPARE}>Compare Mode</Radio.Button>\n                        </Radio.Group>\n                    }\n                >\n                    {viewComponent}\n                </Card>\n            </div>\n        );\n    }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}